(ns day22
  (:require
   [clojure.test :refer [deftest is]]
   [criterium.core :as c]))

(defn mix-and-prune
  [secret f x]
  (mod (bit-xor (f secret x) secret) 16777216))

(defn next-secret
  [secret]
  (-> secret
      (mix-and-prune * 64)
      (mix-and-prune quot 32)
      (mix-and-prune * 2048)))

(defn secret2000
  [secret]
  (loop [i 2000
         secret secret]
    (if (zero? i)
      secret
      (recur (dec i) (next-secret secret)))))

(defn part1
  [input]
  (->> (map parse-long (re-seq #"\d+" (slurp input)))
       (pmap secret2000)
       (reduce +)))

(deftest monkey-market-part1
  (is (= 12979353889 (part1 "resources/day22.input"))
      "Part 1: What is the sum of the 2000th secret number generated by each buyer?"))

(defn banana2000
  [secret]
  (loop [i 2001
         secret secret
         bananas []]
    (if (zero? i)
      bananas
      (recur (dec i)
             (next-secret secret)
             (conj bananas (mod secret 10))))))

(defn banana-sequences
  [secret]
  (let [bananas (banana2000 secret)]
    (->> (partition 2 1 bananas)
         (map (fn [[x y]] (- y x)))
         (partition 4 1)
         (map vector (drop 4 bananas))
         reverse
         (reduce (fn [acc [bananas sequence]]
                   (assoc acc (vec sequence) bananas))
                 {}))))

(defn part2
  [input]
  (->> (map parse-long (re-seq #"\d+" (slurp input)))
       (pmap #(banana-sequences %))
       (reduce #(merge-with + %1 %2))
       vals
       (apply max)))

(deftest monkey-market-part2
  (is (= 1449 (time (part2 "resources/day22.input")))
      "Part 2: What is the most bananas you can get?"))

(comment
  (c/quick-bench (part1 "resources/day22.input")) ;; 12.9 ms
  (c/quick-bench (part2 "resources/day22.input"))) ;; 1.54 secs
